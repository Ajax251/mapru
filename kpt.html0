<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>XML КПТ</title>

    <script src="webfonts/proj4.js"></script>
    <script src="webfonts/jszip.min.js"></script>

    <link rel="icon" href="img/xml.png" type="image/png">
    <script src="sk.js"></script>
    <style>
        :root {
            --panel-bg: rgba(255, 255, 255, 0.65);
            --border-color: rgba(255, 255, 255, 0.4);
            --shadow-color: rgba(0, 0, 0, 0.1);
            --text-color: #2c3e50;
            --accent-color: #3498db;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%);
            color: var(--text-color);
            overflow: hidden;
        }

        .app-container {
            width: 100%;
            max-width: 500px;
            padding: 20px;
        }

        .control-panel {
            background: var(--panel-bg);
            border-radius: 20px;
            box-shadow: 0 10px 35px var(--shadow-color);
            border: 1px solid var(--border-color);
            backdrop-filter: blur(15px);
            padding: 30px;
            display: flex;
            flex-direction: column;
            gap: 25px;
        }

        .input-group, .settings-grid {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        label {
            font-weight: 600;
            font-size: 0.9rem;
            text-align: center;
            letter-spacing: 0.5px;
        }

        input[type="text"], select {
            width: 100%;
            padding: 14px;
            border: 1px solid rgba(52, 73, 94, 0.1);
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            text-align: center;
        }

        input[type="text"] { font-family: 'SF Mono', 'Monaco', monospace; }
        select { cursor: pointer; text-align-last: center; }

        input:focus, select:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 4px rgba(52, 152, 219, 0.2), 0 6px 20px rgba(0,0,0,0.1);
        }

        .settings-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .settings-grid .settings-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
           .settings-grid .settings-group input[type="number"],
        .settings-grid .settings-group select {
            padding: 10px;
            font-size: 0.9rem;
            text-align: center; 
        }
        .checkbox-group {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            cursor: pointer;
            padding: 5px;
            user-select: none;
        }
        .checkbox-group input[type="checkbox"] { transform: scale(1.2); }
        .checkbox-group label { margin-bottom: 0; font-weight: 500; font-size: 0.85rem; }

        .action-area {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 10px;
            flex-direction: column;
            gap: 15px;
        }

        #getXmlButton {
            width: 64px;
            height: 64px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }
        #getXmlButton:hover:not(:disabled) {
            transform: translateY(-4px) scale(1.05);
            box-shadow: 0 12px 30px rgba(0,0,0,0.25);
        }
        #getXmlButton:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
            opacity: 0.7;
        }
        #getXmlButton svg {
            width: 28px;
            height: 28px;
            fill: white;
        }

        #status-indicator {
            font-size: 0.9rem;
            text-align: center;
            min-height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        #status-indicator .spinner {
            width: 16px;
            height: 16px;
            border: 2px solid #ccc;
            border-top-color: var(--accent-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin { to { transform: rotate(360deg); } }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="control-panel">
            <div class="input-group">
                <label for="quarterInput">Кадастровый квартал</label>
                <input type="text" id="quarterInput" placeholder="XX:XX:XXXXXX(X)">
            </div>

            <div class="input-group">
                <label for="destScSelect">Целевая система координат</label>
                <select id="destScSelect"></select>
            </div>

            <div class="settings-grid">
                <div class="settings-group">
                    <label for="offsetXInput">Смещение X (м)</label>
                    <input type="number" id="offsetXInput" value="0" step="0.001">
                </div>
                <div class="settings-group">
                    <label for="offsetYInput">Смещение Y (м)</label>
                    <input type="number" id="offsetYInput" value="0" step="0.001">
                </div>
                 <div class="checkbox-group">
                    <input type="checkbox" id="swapXmlCoordsCheckbox" checked>
                    <label for="swapXmlCoordsCheckbox">Поменять X/Y</label>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" id="reverseDirectionCheckbox" checked>
                    <label for="reverseDirectionCheckbox">Менять направление</label>
                </div>
            </div>

            <div class="action-area">
                <button id="getXmlButton" title="Получить XML">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z"/></svg>
                </button>
                <div id="status-indicator"></div>
            </div>
        </div>
    </div>

    <script>
        // --- DOM Elements ---
        const quarterInput = document.getElementById('quarterInput');
        const getXmlButton = document.getElementById('getXmlButton');
        const statusIndicator = document.getElementById('status-indicator');
        const destScSelect = document.getElementById('destScSelect');
        const offsetXInput = document.getElementById('offsetXInput');
        const offsetYInput = document.getElementById('offsetYInput');
        const swapXmlCoordsCheckbox = document.getElementById('swapXmlCoordsCheckbox');
        const reverseDirectionCheckbox = document.getElementById('reverseDirectionCheckbox');

        const sevenDigitsRegions = ['24', '50', '63', '66', '77', '78', '91'];

        // --- Helper Functions ---
        function setStatus(message, isLoading = false, isError = false) {
            statusIndicator.innerHTML = '';
            if (isLoading) {
                const spinner = document.createElement('div');
                spinner.className = 'spinner';
                statusIndicator.appendChild(spinner);
            }
            const text = document.createElement('span');
            text.textContent = message;
            text.style.color = isError ? '#c0392b' : '#34495e';
            statusIndicator.appendChild(text);
        }

        function formatQuarterNumber(input) {
            let value = input.value.replace(/[^\d]/g, '');
            let formatted = '';
            const originalLength = value.length;
            if (originalLength > 0) formatted += value.substring(0, Math.min(2, originalLength));
            if (originalLength > 2) formatted += ':' + value.substring(2, Math.min(4, originalLength));
            const firstTwoDigits = value.substring(0, 2);
            const isSevenDigitQ = sevenDigitsRegions.includes(firstTwoDigits);
            const quarterMaxLength = isSevenDigitQ ? 7 : 6;
            if (originalLength > 4) formatted += ':' + value.substring(4, Math.min(4 + quarterMaxLength, originalLength));
            input.value = formatted;
        }

        // --- Main Workflow Function ---
        async function handleGetXml() {
            const quarterNumber = quarterInput.value.trim();
            if (!/^\d{2}:\d{2}:\d{6,7}$/.test(quarterNumber)) {
                setStatus('Неверный формат кадастрового квартала.', false, true);
                return;
            }

            getXmlButton.disabled = true;
            setStatus('1/4: Получение данных ...', true);
            
            try {
                // 1. Fetch Data
                const nspdData = await fetchData(quarterNumber);
                if (!nspdData?.features?.length) {
                    throw new Error('В квартале не найдено объектов.');
                }
                
                setStatus('2/4: Преобразование в XML...', true);

                // 2. Convert to XML
                const { xmlContent, filenameBase } = convertJsonToXml(nspdData, quarterNumber);
                
                setStatus('3/4: Архивирование...', true);

                // 3. Create and Download ZIP
                await createAndDownloadZip(xmlContent, filenameBase);

                setStatus('Готово!', false);
                setTimeout(() => setStatus(''), 3000);

            } catch (error) {
                console.error("Ошибка в процессе:", error);
                setStatus(error.message, false, true);
            } finally {
                getXmlButton.disabled = false;
            }
        }

        async function fetchData(quarterNumber) {
            const quarterGeomUrl = `https://nspd.gov.ru/api/geoportal/v2/search/geoportal?thematicSearchId=2&query=${quarterNumber}`;
            const quarterResponse = await fetch(quarterGeomUrl);
            if (!quarterResponse.ok) throw new Error(`Ошибка сети (геометрия): ${quarterResponse.status}`);
            const quarterData = await quarterResponse.json();
            if (!quarterData?.data?.features?.[0]?.geometry) throw new Error('Не удалось получить геометрию квартала.');
            
            const quarterGeometry = quarterData.data.features[0].geometry;
            const parcelsUrl = 'https://nspd.gov.ru/api/geoportal/v1/intersects?typeIntersect=fullObject';
            const parcelsResponse = await fetch(parcelsUrl, {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ "geom": { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": quarterGeometry, "properties": {} }] }, "categories": [{ "id": 36368 }] })
            });
            if (!parcelsResponse.ok) throw new Error(`Ошибка сети (участки): ${parcelsResponse.status}`);
            return await parcelsResponse.json();
        }

        function convertJsonToXml(nspdData, quarterNumber) {
            if (typeof COORDINATE_SYSTEMS === 'undefined') { throw new Error("Список СК не загружен."); }

            const performConversion = true; // Always convert
            const swapXmlCoords = swapXmlCoordsCheckbox.checked;
            const reverseDirection = reverseDirectionCheckbox.checked;
            const targetCS_value = destScSelect.value;
            const targetCS_text = destScSelect.options[destScSelect.selectedIndex].text;
            const offsetX = parseFloat(offsetXInput.value) || 0;
            const offsetY = parseFloat(offsetYInput.value) || 0;
            const sourceCS_value = 'EPSG:3857';

            if (performConversion) {
                try {
                    const sourceDef = COORDINATE_SYSTEMS.find(s => s.value === sourceCS_value)?.def;
                    const destDef = COORDINATE_SYSTEMS.find(s => s.value === targetCS_value)?.def;
                    if (!sourceDef || !destDef) throw new Error(`Определение для ${sourceCS_value} или ${targetCS_value} не найдено в sk.js`);
                    proj4.defs(sourceCS_value, sourceDef); proj4.defs(targetCS_value, destDef);
                } catch (e) { throw new Error(`Ошибка определения СК: ${e.message}`); }
            }
            
            const today = new Date();
            const dateString = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
            const quarterSafe = quarterNumber.replace(/:/g, '_');
            const filenameBase = `${quarterSafe} ${dateString} NSPD`;

            const features = nspdData.features;
            const escapeXml = (unsafe) => unsafe ? String(unsafe).replace(/[<>&'"]/g, c => ({'<':'&lt;','>':'&gt;','&':'&amp;','\'':'&apos;','"':'&quot;'}[c])) : '-';

            const landRecordsXml = features.map(feature => {
                const props = feature.properties.options || {};
                const geometry = feature.geometry;
                let finalSkId = 'EPSG:3857';

                const contoursXml = (geometry && geometry.coordinates) ? geometry.coordinates.map((ring) => {
                    let points = geometry.type === 'MultiPolygon' ? ring[0] : ring;
                    if (reverseDirection) { points = points.slice().reverse(); }
                    
                    const ordinatesXml = points.map((point, i) => {
                        let projectedX = point[0], projectedY = point[1];
                        if (performConversion && targetCS_value !== sourceCS_value) {
                            try {
                                const convertedPoint = proj4(sourceCS_value, targetCS_value, [projectedX, projectedY]);
                                projectedX = convertedPoint[0]; projectedY = convertedPoint[1];
                                finalSkId = targetCS_text.split('(')[0].trim();
                            } catch(e) { console.error(`Ошибка конвертации: ${e.message}`); return `<ordinate><error/></ordinate>`; }
                        }
                        
                        const decimalPlaces = targetCS_value === 'EPSG:4326' ? 8 : 2;
                        let finalXmlX, finalXmlY;
                        if (swapXmlCoords) {
                            finalXmlX = (projectedY + offsetX).toFixed(decimalPlaces);
                            finalXmlY = (projectedX + offsetY).toFixed(decimalPlaces);
                        } else {
                            finalXmlX = (projectedX + offsetX).toFixed(decimalPlaces);
                            finalXmlY = (projectedY + offsetY).toFixed(decimalPlaces);
                        }

                        return `<ordinate><x>${finalXmlX}</x><y>${finalXmlY}</y><ord_nmb>${i + 1}</ord_nmb><num_geopoint>${i + 1}</num_geopoint><delta_geopoint>0.0</delta_geopoint></ordinate>`;
                    }).join('');
                    return `<contour><entity_spatial><sk_id>${escapeXml(finalSkId)}</sk_id><spatials_elements><spatial_element><ordinates>${ordinatesXml}</ordinates></spatial_element></spatials_elements></entity_spatial></contour>`;
                }).join('') : '';
                
                const isAreaSpecified = props.specified_area || props.land_record_area_verified;
                const areaValue = isAreaSpecified || props.declared_area || props.land_record_area_declaration || props.land_record_area;
                const areaXmlBlock = isAreaSpecified ?
                    `<area><value>${escapeXml(areaValue)}</value><inaccuracy>0</inaccuracy></area>` :
                    `<area><value>${escapeXml(areaValue)}</value></area>`;

                return `<land_record><object><common_data><type><code>002001001000</code><value>${escapeXml(props.land_record_type||'Земельный участок')}</value></type><cad_number>${escapeXml(props.cad_num)}</cad_number></common_data></object><params><category><type><code>003002000000</code><value>${escapeXml(props.land_record_category_type)}</value></type></category><permitted_use><permitted_use_established><by_document>${escapeXml(props.permitted_use_established_by_document)}</by_document></permitted_use_established></permitted_use>${areaXmlBlock}</params><address_location><address><readable_address>${escapeXml(props.readable_address)}</readable_address></address></address_location><cost><value>${escapeXml(props.cost_value)}</value></cost><contours_location><contours>${contoursXml}</contours></contours_location></land_record>`;
            }).join('');
            
            const fullXml = `<?xml version="1.0" encoding="UTF-8"?><extract_cadastral_plan_territory><details_statement><group_top_requisites><organ_registr_rights>Филиал ППК "Роскадастр" (данные из НСПД)</organ_registr_rights><date_formation>${dateString}</date_formation><registration_number>НСПД-КОНВЕРТЕР</registration_number></group_top_requisites></details_statement><cadastral_blocks><cadastral_block><cadastral_number>${escapeXml(quarterNumber)}</cadastral_number><record_data><base_data><land_records>${landRecordsXml}</land_records></base_data></record_data></cadastral_block></cadastral_blocks></extract_cadastral_plan_territory>`;
            
            return { xmlContent: fullXml, filenameBase };
        }

        async function createAndDownloadZip(xmlContent, filenameBase) {
            const zip = new JSZip();
            zip.file(`${filenameBase}.xml`, xmlContent);
            const blob = await zip.generateAsync({
                type: "blob",
                compression: "DEFLATE",
                compressionOptions: { level: 9 }
            });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `${filenameBase}.zip`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        }

        function initializeApp() {
            if (typeof COORDINATE_SYSTEMS === 'undefined' || !Array.isArray(COORDINATE_SYSTEMS)) {
                setStatus("Ошибка: Не удалось загрузить список СК из sk.js.", false, true);
                destScSelect.disabled = true; return;
            }
            COORDINATE_SYSTEMS.forEach(system => { const option = document.createElement('option'); option.value = system.value; option.textContent = system.text; destScSelect.appendChild(option); });

           const savedCS = localStorage.getItem('selectedCoordinateSystem');
        if (savedCS) {
          
            destScSelect.value = savedCS;
        } else {
            
            destScSelect.value = "EPSG:6331602";
        }

            destScSelect.addEventListener('change', (e) => {
                localStorage.setItem('selectedCoordinateSystem', e.target.value);
                const selectedSystem = COORDINATE_SYSTEMS.find(s => s.value === e.target.value);
                if (selectedSystem) {
                    offsetXInput.value = selectedSystem.offsetX || 0;
                    offsetYInput.value = selectedSystem.offsetY || 0;
                }
            });
            destScSelect.dispatchEvent(new Event('change'));

            quarterInput.addEventListener('input', () => formatQuarterNumber(quarterInput));
            getXmlButton.addEventListener('click', handleGetXml);
            quarterInput.addEventListener('keydown', (event) => { if (event.key === 'Enter') handleGetXml(); });
        }

        document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
</body>
</html>