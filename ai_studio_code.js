<script>
window.addEventListener('load', () => {
    // --- CONFIGURATION ---
    const VERCEL_LINK_EXTRACTOR_API = "https://linkextractor.vercel.app/extract-from-url/";
    const MAPRUAPP_SCRAPER_API = `https://mapruapp.ru/page-scraper/get-source`;
    const VERCEL_TEXT_EXTRACTOR_API = "https://text-extractor-pdf.vercel.app/api/extract";

    const VERCEL_PROXY_BASE_URL = "https://ver-olive-delta.vercel.app";
    const MAPRUAPP_PROXY_BASE_URL = "https://mapruapp.ru";
    
    const MODELS = [
        { id: "gemini-2.5-flash-lite-preview-06-17", uiName: "Gemini 2.5 Flash Lite (–±—ã—Å—Ç—Ä–∞—è)", apiType: "gemini" },
        { id: "gemini-2.5-flash", uiName: "Gemini 2.5 Flash", apiType: "gemini" },
        { id: "mistral-medium-2505", uiName: "Mistral Medium (–±—ã—Å—Ç—Ä–∞—è)", apiType: "mistral" },
        { id: "magistral-medium-2506", uiName: "Mistral Magistral", apiType: "mistral" },
    ];
    const DEFAULT_MODEL_ID = "gemini-2.5-flash-lite-preview-06-17";

    const urlPattern = new RegExp('^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z–∞-—è—ë\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#.*)?$','i');
    
    const AI_SYSTEM_PROMPT_F1_ADVANCED = `–¢—ã ‚Äî ¬´F1 Helper¬ª, —ç–ª–∏—Ç–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å. –¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—ã—Ä–æ–π HTML-–∫–æ–¥ –ª—é–±–æ–≥–æ —Å–∞–π—Ç–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é, –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –∏ –ø–æ–Ω—è—Ç–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é. –¢—ã –¥–æ–ª–∂–µ–Ω –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —Å–≤–æ—ë —Ç–≤–æ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

### **–ê–õ–ì–û–†–ò–¢–ú –ê–ù–ê–õ–ò–ó–ê:**
1.  **–ì–õ–£–ë–û–ö–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï:** –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ HTML –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JavaScript.
2.  **–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–£–¢–ò:** –ü–æ–π–º–∏, —ç—Ç–æ —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞, –±–ª–æ–≥, –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Ä—Ç–∞–ª –∏–ª–∏ **–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**?
3.  **–°–û–ó–î–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:** –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –ø–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–π –Ω–∏–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.

**–í–ê–ñ–ù–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï: –í–µ—Å—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –í—Å–µ–≥–¥–∞.**

---

### **–°–¢–†–£–ö–¢–†–£–†–ê –û–¢–í–ï–¢–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê):**
# üìú –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∞–π—Ç—É: [–ò–∑–≤–ª–µ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ <title> –∏–ª–∏ <h1>]
### üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞–π—Ç–∞
[–í 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é —Ü–µ–ª—å —Å–∞–π—Ç–∞. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –æ–Ω —Ä–µ—à–∞–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?]
### üöÄ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è: –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
[–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏ —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.]
### üïµÔ∏è‚Äç‚ôÄÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∂–∏–º—ã
[–ù–∞–π–¥–∏ –∏ –æ–ø–∏—à–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã, —Å–∫—Ä—ã—Ç—ã–µ –º–µ–Ω—é, —Å–ª–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.]
### ‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
[–¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π JavaScript –∏ HTML –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à.]
### üí° –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
[–î–∞–π 1-2 –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∞–π—Ç–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.]`;
    
    const AI_SYSTEM_PROMPT_CONTENT_ANALYST = `–¢—ã ‚Äî ¬´–ö–æ–Ω—Ç–µ–Ω—Ç-–ê–Ω–∞–ª–∏—Ç–∏–∫¬ª, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑—É—á–∏—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, PDF) –∏ –¥–∞—Ç—å –ø–æ –Ω–µ–º—É –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é, –Ω–æ –ø–æ–Ω—è—Ç–Ω—É—é —Å–ø—Ä–∞–≤–∫—É.

### **–ê–õ–ì–û–†–ò–¢–ú –†–ê–ë–û–¢–´:**
1.  **–û–ü–†–ï–î–ï–õ–ò –°–£–¢–¨:** –ü—Ä–æ—á–∏—Ç–∞–π –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–π–º–∏ –µ–≥–æ –≥–ª–∞–≤–Ω—É—é —Ç–µ–º—É, —Ü–µ–ª—å –∏ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏.
2.  **–°–¢–†–£–ö–¢–£–†–ò–†–£–ô –û–¢–í–ï–¢:** –°–æ–∑–¥–∞–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –ø–æ —à–∞–±–ª–æ–Ω—É –Ω–∏–∂–µ. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫, –Ω–æ —Ç–æ—á–µ–Ω.

**–í–ê–ñ–ù–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï: –í–µ—Å—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –í—Å–µ–≥–¥–∞.**

---

### **–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê):**
# üìÑ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
### üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
[–í 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –∏–∑–ª–æ–∂–∏ –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å –∏–ª–∏ —Ü–µ–ª—å —Ç–µ–∫—Å—Ç–∞. –û —á–µ–º —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?]
### üîë –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã
[–ü—Ä–µ–¥—Å—Ç–∞–≤—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è, –≤—ã–≤–æ–¥—ã –∏–ª–∏ —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –º—ã—Å–ª—å—é.]
*   –¢–µ–∑–∏—Å 1
*   –¢–µ–∑–∏—Å 2
*   –¢–µ–∑–∏—Å 3
...
### üí° –ß—Ç–æ –≤–∞–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å
[–í—ã–¥–µ–ª–∏ 1-2 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞, –≤—ã–≤–æ–¥–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É—Å–≤–æ–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.]
[–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –±—É–¥—å –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É.]`;

    // --- DOM ELEMENTS ---
    const startScreen = document.getElementById('start-screen');
    const loadingScreen = document.getElementById('loading-screen');
    const resultsScreen = document.getElementById('results-screen');
    const urlForm = document.getElementById('url-form');
    const urlInput = document.getElementById('url-input');
    const submitBtnText = document.getElementById('submit-btn-text');
    const contentAnalysisCheckbox = document.getElementById('content-analysis-checkbox');
    const loadingText = document.getElementById('loading-text');
    const chatHistoryContainer = document.getElementById('chat-history');
    const newSiteBtn = document.getElementById('new-site-btn');
    const settingsBtn = document.getElementById('settings-btn');
    const settingsModalOverlay = document.getElementById('settings-modal-overlay');
    const saveSettingsBtn = document.getElementById('save-settings-btn');
    const modelSelector = document.getElementById('model-selector');
    const pageScraperSelector = document.getElementById('page-scraper-selector');
    const currentSettingsDisplay = document.getElementById('current-settings-display');
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-input');
    const chatSendBtn = document.getElementById('chat-send-btn');

    // --- STATE VARIABLES ---
    let controller = null;
    let currentModelId = DEFAULT_MODEL_ID;
    let currentPageScraperService = 'vercel';
    let chatHistory = []; 

    // --- CORE FUNCTIONS ---
    const initializeApp = () => {
        marked.setOptions({ renderer: new marked.Renderer(), sanitize: false, gfm: true });
        
        loadSettings();
        populateModelSelector();

        urlForm.addEventListener('submit', handleSubmit);
        chatForm.addEventListener('submit', handleChatSubmit);
        newSiteBtn.addEventListener('click', resetApp);
        settingsBtn.addEventListener('click', () => settingsModalOverlay.classList.add('show'));
        saveSettingsBtn.addEventListener('click', saveAndCloseSettings);
        settingsModalOverlay.addEventListener('click', (e) => { if (e.target === settingsModalOverlay) settingsModalOverlay.classList.remove('show'); });
        contentAnalysisCheckbox.addEventListener('change', (e) => {
            submitBtnText.textContent = e.target.checked ? '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å' : '–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é';
        });

        showScreen('start');
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        chatHistory = []; 
        let url = urlInput.value.trim();
        if (!url) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å.');
            return;
        }
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }
        if (!urlPattern.test(url)) {
            alert('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
            return;
        }

        controller = new AbortController();
        const isContentAnalysis = contentAnalysisCheckbox.checked;

        try {
            let systemPrompt, userPrompt, initialData;
            
            if (isContentAnalysis) {
                showScreen('loading', '–ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
                initialData = await fetchContentText(url);
                systemPrompt = AI_SYSTEM_PROMPT_CONTENT_ANALYST;
                userPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n\n---\n${initialData}\n---`;
            } else {
                showScreen('loading', '–ò–∑–≤–ª–µ–∫–∞—é –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
                initialData = await fetchPageSource(url);
                systemPrompt = AI_SYSTEM_PROMPT_F1_ADVANCED;
                userPrompt = `${AI_SYSTEM_PROMPT_F1_ADVANCED}\n\n--- –ù–ê–ß–ê–õ–û HTML-–ö–û–î–ê ---\n${initialData}\n--- –ö–û–ù–ï–¶ HTML-–ö–û–î–ê ---`;
            }

            showScreen('loading', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Å–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç...');
            
            chatHistory.push({ role: 'system', content: systemPrompt });
            chatHistory.push({ role: 'user', content: userPrompt });

            const aiResponseText = await getAIResponse(chatHistory);
            chatHistory.push({ role: 'model', content: aiResponseText });
            
            renderChatHistory();
            showScreen('results');
            chatForm.classList.remove('hidden'); 

        } catch (error) {
            if (error.name !== 'AbortError') {
                const errorMessage = `<h2><i class="fa-solid fa-triangle-exclamation"></i> –û—à–∏–±–∫–∞</h2><p>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.</p><p><small>–î–µ—Ç–∞–ª–∏: ${error.message}</small></p>`;
                chatHistoryContainer.innerHTML = `<div class="error-message">${errorMessage}</div>`;
                showScreen('results');
            }
        } finally {
            controller = null;
        }
    };

    const handleChatSubmit = async (e) => {
        e.preventDefault();
        const userText = chatInput.value.trim();
        if (!userText || chatSendBtn.disabled) return;

        chatInput.value = '';
        chatSendBtn.disabled = true;

        chatHistory.push({ role: 'user', content: userText });
        renderChatHistory();
        
        try {
            const aiResponseText = await getAIResponse(chatHistory);
            chatHistory.push({ role: 'model', content: aiResponseText });
        } catch (error) {
             if (error.name !== 'AbortError') {
                const errorMessage = `**–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. ${error.message}`;
                chatHistory.push({ role: 'model', content: errorMessage });
             }
        } finally {
            renderChatHistory();
            chatSendBtn.disabled = false;
            chatInput.focus();
        }
    };
    
    async function fetchPageSource(url) {
        let fullUrl = url.startsWith('http://') || url.startsWith('https://') ? url : `https://${url}`;
        let response;
        try {
            if (currentPageScraperService === 'mapruapp') {
                response = await fetch(MAPRUAPP_SCRAPER_API, {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url: fullUrl }), signal: controller?.signal
                });
            } else {
                const formData = new FormData();
                formData.append('url_input', fullUrl);
                response = await fetch(VERCEL_LINK_EXTRACTOR_API, {
                    method: 'POST', body: formData, signal: controller?.signal
                });
            }
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.detail || errorData.error || `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
            const data = await response.json();
            const sourceHtml = data.source_html || data.content;
            if (!sourceHtml) {
                 throw new Error(`–°–µ—Ä–≤–∏—Å ${currentPageScraperService} –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥.`);
            }
            return sourceHtml;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞ (${currentPageScraperService}): ${error.message}`);
        }
    }

    async function fetchContentText(url) {
        const apiUrl = `${VERCEL_TEXT_EXTRACTOR_API}?url=${encodeURIComponent(url)}`;
        try {
            const response = await fetch(apiUrl, { signal: controller?.signal });
             if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.error || `–°–µ—Ä–≤–∏—Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
            }
            const data = await response.json();
            if (!data.text || data.text.trim() === '') {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.');
            }
            return data.text;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: ${error.message}`);
        }
    }
    
    async function getAIResponse(messages) {
        const selectedModel = MODELS.find(m => m.id === currentModelId) || MODELS[0];
        const apiType = selectedModel.apiType;

        let apiUrl, requestBody;
        const fetchOptions = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            signal: controller?.signal
        };

        const systemInstruction = messages.find(m => m.role === 'system')?.content || "";
        const userMessages = messages.filter(m => m.role !== 'system').map(m => {
            if (apiType === 'gemini') {
                return { role: m.role === 'model' ? 'model' : 'user', parts: [{ text: m.content }] };
            }
            return m; 
        });

        if (apiType === 'gemini') {
            apiUrl = `${VERCEL_PROXY_BASE_URL}/v1beta/models/${currentModelId}:generateContent`;
            requestBody = {
                contents: userMessages,
                systemInstruction: { parts: [{ text: systemInstruction }] }
            };
        } else if (apiType === 'mistral') {
             apiUrl = `${MAPRUAPP_PROXY_BASE_URL}/ai/api/v1/chat/completions`;
             requestBody = {
                model: currentModelId,
                messages: [{ role: 'system', content: systemInstruction }, ...userMessages],
                max_tokens: 4096
            };
        } else {
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø API: ${apiType}`);
        }

        fetchOptions.body = JSON.stringify(requestBody);
        const response = await fetch(apiUrl, fetchOptions);

        if (!response.ok) {
            const errorBody = await response.json().catch(() => ({}));
            throw new Error(errorBody.error?.message || `API-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
        }

        const data = await response.json();
        let aiResponseText = "";
        if (apiType === 'gemini') aiResponseText = data.candidates?.[0]?.content?.parts?.[0]?.text;
        else if (apiType === 'mistral') aiResponseText = data.choices?.[0]?.message?.content;

        if (!aiResponseText) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.`);
        }
        return aiResponseText;
    }

    function renderChatHistory() {
        chatHistoryContainer.innerHTML = '';
        const relevantHistory = chatHistory.filter(m => m.role !== 'system');

        relevantHistory.forEach(msg => {
            const msgDiv = document.createElement('div');
            msgDiv.classList.add('chat-message');
            if (msg.role === 'user') {
                msgDiv.classList.add('user-message');
                msgDiv.textContent = msg.content;
            } else { 
                msgDiv.classList.add('ai-message');
                msgDiv.innerHTML = marked.parse(msg.content);
            }
            chatHistoryContainer.appendChild(msgDiv);
        });

        if (chatHistory.length > 0 && chatHistory[chatHistory.length - 1].role === 'user') {
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing-indicator';
            typingIndicator.innerHTML = `<span></span><span></span><span></span>`;
            chatHistoryContainer.appendChild(typingIndicator);
        }

        chatHistoryContainer.scrollTop = chatHistoryContainer.scrollHeight;
    }
    
    function showScreen(screenName, text = '') {
        startScreen.classList.add('hidden');
        loadingScreen.classList.add('hidden');
        resultsScreen.classList.add('hidden');

        if (screenName === 'start') startScreen.classList.remove('hidden');
        else if (screenName === 'loading') {
            loadingText.textContent = text;
            loadingScreen.classList.remove('hidden');
        } else if (screenName === 'results') resultsScreen.classList.remove('hidden');
    };

    function resetApp() {
        if (controller) {
            controller.abort();
            controller = null;
        }
        urlInput.value = '';
        chatInput.value = '';
        chatHistoryContainer.innerHTML = '';
        chatHistory = []; 
        chatForm.classList.add('hidden'); 
        chatSendBtn.disabled = false;
        showScreen('start');
    };

    function populateModelSelector() {
        modelSelector.innerHTML = '';
        MODELS.forEach(model => {
            const option = document.createElement('option');
            option.value = model.id;
            option.textContent = model.uiName;
            if (model.id === currentModelId) option.selected = true;
            modelSelector.appendChild(option);
        });
    }
    function saveAndCloseSettings() {
        currentModelId = modelSelector.value;
        currentPageScraperService = pageScraperSelector.value;
        localStorage.setItem('f1_modelId', currentModelId);
        localStorage.setItem('f1_scraperService', currentPageScraperService);
        settingsModalOverlay.classList.remove('show');
        updateSettingsDisplay();
    }
    function loadSettings() {
        currentModelId = localStorage.getItem('f1_modelId') || DEFAULT_MODEL_ID;
        currentPageScraperService = localStorage.getItem('f1_scraperService') || 'vercel';
        modelSelector.value = currentModelId;
        pageScraperSelector.value = currentPageScraperService;
        updateSettingsDisplay();
    }
    function updateSettingsDisplay() {
        const selectedModel = MODELS.find(m => m.id === currentModelId) || {uiName: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"};
        const scraperName = pageScraperSelector.options[pageScraperSelector.selectedIndex].text;
        currentSettingsDisplay.textContent = `–ú–æ–¥–µ–ª—å: ${selectedModel.uiName.split('(')[0].trim()} | –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ: ${scraperName.split('(')[0].trim()}`;
    }

    initializeApp();
});
</script>